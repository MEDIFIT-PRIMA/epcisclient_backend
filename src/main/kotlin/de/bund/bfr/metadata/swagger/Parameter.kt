/**
 * RAKIP Generic model
 * TODO
 *
 * OpenAPI spec version: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package de.bund.bfr.metadata.swagger

import de.bund.bfr.metadata.swagger.Reference

/**
 * 
 * @param id An unambiguous ID given to each of the parameters - preferably autogenerated by a software tool and compatible with SBML ID requirements, only letters from A to Z, numbers and '_'
 * @param classification General classification of the parameter (e.g. Input, Constant, Output...)
 * @param name A name given to the parameter
 * @param description General description of the parameter
 * @param unit Unit of the parameter
 * @param unitCategory Empty
 * @param dataType Information on the data format of the parameter, e.g. if it the input parameter is a file location or a date or a number. This is important for software tools interpreting the metadata and generate user interfaces for parameter input.
 * @param source Information on the type of knowledge used to define the parameter value
 * @param subject Scope of the parameter, e.g. if it refers to an animal, a batch of animals, a batch of products, a carcass, a carcass skin etc
 * @param distribution Distribution describing the parameter variabilty. If no distribution selected this means the value provided in \"Parameter value\" is a point estimate. In case a distribution is selected the value provided in \"Parameter value\" is a string that the model code can parse in order to sample from the named distribution
 * @param value A default value for the parameter. This is mandatory (needs to be provided) for all parameters of type 'Input'
 * @param reference 
 * @param variabilitySubject Information 'per what' the variability is described. It can be variability between broiler in a flock,  variability between all meat packages sold, variability between days, etc.
 * @param minValue Numerical value of the minimum limit of the parameter that determines the range of applicability for which the model applies
 * @param maxValue Numerical value of the maximum limit of the parameter that determines the range of applicability for which the model applies
 * @param error Error of the parameter value
 */
data class Parameter (

    /* An unambiguous ID given to each of the parameters - preferably autogenerated by a software tool and compatible with SBML ID requirements, only letters from A to Z, numbers and '_' */
    val id: kotlin.String,
    /* General classification of the parameter (e.g. Input, Constant, Output...) */
    val classification: Parameter.Classification,
    /* A name given to the parameter */
    val name: kotlin.String,
    /* General description of the parameter */
    val description: kotlin.String? = null,
    /* Unit of the parameter */
    val unit: kotlin.String,
    /* Empty */
    val unitCategory: kotlin.String? = null,
    /* Information on the data format of the parameter, e.g. if it the input parameter is a file location or a date or a number. This is important for software tools interpreting the metadata and generate user interfaces for parameter input. */
    val dataType: Parameter.DataType,
    /* Information on the type of knowledge used to define the parameter value */
    val source: kotlin.String? = null,
    /* Scope of the parameter, e.g. if it refers to an animal, a batch of animals, a batch of products, a carcass, a carcass skin etc */
    val subject: kotlin.String? = null,
    /* Distribution describing the parameter variabilty. If no distribution selected this means the value provided in \"Parameter value\" is a point estimate. In case a distribution is selected the value provided in \"Parameter value\" is a string that the model code can parse in order to sample from the named distribution */
    val distribution: kotlin.String? = null,
    /* A default value for the parameter. This is mandatory (needs to be provided) for all parameters of type 'Input' */
    val value: kotlin.String? = null,
    val reference: Reference? = null,
    /* Information 'per what' the variability is described. It can be variability between broiler in a flock,  variability between all meat packages sold, variability between days, etc. */
    val variabilitySubject: kotlin.String? = null,
    /* Numerical value of the minimum limit of the parameter that determines the range of applicability for which the model applies */
    val minValue: kotlin.String? = null,
    /* Numerical value of the maximum limit of the parameter that determines the range of applicability for which the model applies */
    val maxValue: kotlin.String? = null,
    /* Error of the parameter value */
    val error: kotlin.String? = null
) {
    /**
    * General classification of the parameter (e.g. Input, Constant, Output...)
    * Values: CONSTANT,INPUT,OUTPUT
    */
    enum class Classification(val value: kotlin.String){
        CONSTANT("CONSTANT"),
        INPUT("INPUT"),
        OUTPUT("OUTPUT");
    }
    /**
    * Information on the data format of the parameter, e.g. if it the input parameter is a file location or a date or a number. This is important for software tools interpreting the metadata and generate user interfaces for parameter input.
    * Values: INTEGER,DOUBLE,NUMBER,DATE,FILE,BOOLEAN,VECTOROFNUMBERS,VECTOROFSTRINGS,MATRIXOFNUMBERS,MATRIXOFSTRINGS,OBJECT,STRING
    */
    enum class DataType(val value: kotlin.String){
        INTEGER("INTEGER"),
        DOUBLE("DOUBLE"),
        NUMBER("NUMBER"),
        DATE("DATE"),
        FILE("FILE"),
        BOOLEAN("BOOLEAN"),
        VECTOROFNUMBERS("VECTOROFNUMBERS"),
        VECTOROFSTRINGS("VECTOROFSTRINGS"),
        MATRIXOFNUMBERS("MATRIXOFNUMBERS"),
        MATRIXOFSTRINGS("MATRIXOFSTRINGS"),
        OBJECT("OBJECT"),
        STRING("STRING");
    }
}