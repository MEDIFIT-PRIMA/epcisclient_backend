/**
 * RAKIP Generic model
 * TODO
 *
 * OpenAPI spec version: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package de.bund.bfr.metadata.swagger


/**
 * 
 * @param sampleName An unambiguous ID given to the samples used in the assay
 * @param protocolOfSampleCollection Additional protocol for sample and sample collection. Corresponds to the Protocol REF in ISA
 * @param samplingStrategy Sampling strategy (ref. EUROSTAT - Typology of sampling strategy, version of July 2009)
 * @param typeOfSamplingProgram Indicate the type of programm for which the samples have been collected
 * @param samplingMethod Sampling method used to take the sample
 * @param samplingPlan Description of data collection technique (stratified or complex sampling (several stages))
 * @param samplingWeight Description of the method employed to compute sampling weight (nonresponse-adjusted weight)
 * @param samplingSize Number of units, full participants, partial participants, eligibles, not eligible, unresolved (eligibility status not resolved)…
 * @param lotSizeUnit Unit in which the lot size is expressed
 * @param samplingPoint Point in the food chain where the sample was taken. (Doc. ESTAT/F5/ES/155 “Data dictionary of activities of the establishments”)
 */
data class StudySample (

    /* An unambiguous ID given to the samples used in the assay */
    val sampleName: kotlin.String,
    /* Additional protocol for sample and sample collection. Corresponds to the Protocol REF in ISA */
    val protocolOfSampleCollection: kotlin.String,
    /* Sampling strategy (ref. EUROSTAT - Typology of sampling strategy, version of July 2009) */
    val samplingStrategy: kotlin.String? = null,
    /* Indicate the type of programm for which the samples have been collected */
    val typeOfSamplingProgram: kotlin.String? = null,
    /* Sampling method used to take the sample */
    val samplingMethod: kotlin.String? = null,
    /* Description of data collection technique (stratified or complex sampling (several stages)) */
    val samplingPlan: kotlin.String,
    /* Description of the method employed to compute sampling weight (nonresponse-adjusted weight) */
    val samplingWeight: kotlin.String,
    /* Number of units, full participants, partial participants, eligibles, not eligible, unresolved (eligibility status not resolved)… */
    val samplingSize: kotlin.String,
    /* Unit in which the lot size is expressed */
    val lotSizeUnit: kotlin.String? = null,
    /* Point in the food chain where the sample was taken. (Doc. ESTAT/F5/ES/155 “Data dictionary of activities of the establishments”) */
    val samplingPoint: kotlin.String? = null
) {
}